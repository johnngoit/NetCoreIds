using System;
using System.Threading.Tasks;
using System.Transactions;
//using Microsoft.VisualStudio.TestTools.UnitTesting;
using NUnit.Framework;
using NSubstitute;
using NSubstitute.Core;
using PacketDotNet;
using SharpPcap;
using Ids.Common;
using Ids.Common.Interfaces;
using Ids.Common.Data;
using Ids.Common.Rules;
using Ids.Common.Sensors;
using Ids.Common.Reporters;
using Ids.Common.Idmef;
using System.Diagnostics;
using System.Threading;

namespace Ids.Tests
{
	//[TestClass]
	[TestFixture]
	public class SensorTests
	{
		//[TestInitialize]
		public void Ini() {
			while(!Debugger.IsAttached) Thread.Sleep(500);;
		}
		//Sensors
		//Configure the sensor
		//A sensor receives network information//
		//It checks the information against a rule set
		//If there is a match it generates an alert.
		//[TestMethod]
		[Test]
		public void UseSubSensorWithInformationSource_NormalData_CountsInformationItemsCorrectly()
		{
			//arrange
			var sensor = Substitute.For<ISensor>();
			var informationSource = Substitute.For<IInformationSource>();
			var netEvenTArgs = new NetworkEventArgs(string.Empty, 0, string.Empty, 0, string.Empty, DateTime.Now, Guid.NewGuid());
			informationSource.AddNetworkMessage(netEvenTArgs);
			informationSource.AddNetworkMessage(netEvenTArgs);
			informationSource.AddNetworkMessage(netEvenTArgs);
			informationSource.BufferCount.Returns(3);

			//act
			sensor.InformationSource = informationSource;

			//assert
			Assert.AreEqual(3,sensor.InformationSource.BufferCount);
		}

		[Test]
		public void CreateSimpleSensorWithInformationSource_NormalData_CountsInformationItemsCorrectly()
		{
			//arrange
			var informationSource = new SimpleInformationSource();
			var netEvenTArgs = new NetworkEventArgs(string.Empty, 0, string.Empty, 0, string.Empty, DateTime.Now, Guid.NewGuid());
			informationSource.AddNetworkMessage(netEvenTArgs);
			informationSource.AddNetworkMessage(netEvenTArgs);
			informationSource.AddNetworkMessage(netEvenTArgs);
			var sensor = new Sensor(informationSource, null);

			//act
			
			//assert
			Assert.AreEqual(3,sensor.UnreadBufferCount);
		}

		[Test]
		public void CreateSimpleSensorWithInformationSource_NormalData_ProcessMessageCorrectly()
		{
			//arrange
			var informationSource = new SimpleInformationSource();
			var netEvenTArgs = new NetworkEventArgs(string.Empty, 0, string.Empty, 0, "hacking attempt", DateTime.Now, Guid.NewGuid());
			var netEvenTArgs2 = new NetworkEventArgs(string.Empty, 0, string.Empty, 0, "hello", DateTime.Now, Guid.NewGuid());
			var netEvenTArgs3 = new NetworkEventArgs(string.Empty, 0, string.Empty, 0, "hello", DateTime.Now, Guid.NewGuid());
			informationSource.AddNetworkMessage(netEvenTArgs);
			informationSource.AddNetworkMessage(netEvenTArgs2);
			informationSource.AddNetworkMessage(netEvenTArgs3);
			SimpleRule rule = new SimpleRule("hacking attempt");
			var sensor = new Sensor(informationSource, rule);

			//act
			bool result = sensor.ProcessNextMessage();
			
			//assert
			Assert.AreEqual(true,result);
			Assert.AreEqual(2, sensor.UnreadBufferCount);
		}

		[Test]
		public void CreateSimpleSensorWithInformationSource_FtpAdminLoginData_ProcessMessageCorrectly()
		{
			//arrange
			var informationSource = new SimpleInformationSource();
			var netEvenTArgs = new NetworkEventArgs(string.Empty, 0, string.Empty, 0, "USER admin", DateTime.Now, Guid.NewGuid());
			var netEvenTArgs2 = new NetworkEventArgs(string.Empty, 0, string.Empty, 0, "hello", DateTime.Now, Guid.NewGuid());
			var netEvenTArgs3 = new NetworkEventArgs(string.Empty, 0, string.Empty, 0, "hello", DateTime.Now, Guid.NewGuid());
			informationSource.AddNetworkMessage(netEvenTArgs);
			informationSource.AddNetworkMessage(netEvenTArgs2);
			informationSource.AddNetworkMessage(netEvenTArgs3);
			SimpleRule ftpRule = new SimpleRule("USER admin");
			var sensor = new Sensor(informationSource, ftpRule);

			//act
			bool result = sensor.ProcessNextMessage();
			
			//assert
			Assert.AreEqual(true,result);
			Assert.AreEqual(2, sensor.UnreadBufferCount);
		}

		// [TestMethod]
		// public async Task CreateHostSweepSensor_HostSweepPackets_HostScanAlertCtreated()
		// {
		// 	//arrange
		// 	IDataAgent datagAgent = new EfDataAgent();
		// 	DatabaseReporter reportAgent = new DatabaseReporter(datagAgent);
		// 	RawCapture[] trafficDataForTest = CreateNetworkDataForTest();
		// 	var captureDevice = new TestCaptureDevice(trafficDataForTest);
		// 	SharpPcapInformationSource networkInformationSource = new SharpPcapInformationSource(captureDevice, 2000);
		// 	IRule hostScanRule = new HostScanRule(5);
		// 	Sensor hostScanSensor = new Sensor(networkInformationSource, hostScanRule, reportAgent);

		// 	using (TransactionScope transaction = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
		// 	{		
		// 		//act
		// 		hostScanSensor.Start();
		// 		await TestPause();
		// 		int numberofHostScanAlerts = datagAgent.CountAlerts();

		// 		//assert
		// 		Assert.AreEqual(1, numberofHostScanAlerts);
		// 	}
		// }


		[Test]
		public async Task CreatePortScanSensor_PortScanPackets_PortScanAlertCtreated()
		{
			//arrange
			string connectionString = @"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=IDSDB;Persist Security Info=True;User ID=cyberproduct;Password=x2000; Connect Timeout=600;Max Pool Size = 200;Pooling = True";
			IDataAgent datagAgent = new EfDataAgent(connectionString);
			DatabaseReporter reportAgent = new DatabaseReporter(datagAgent);
			RawCapture[] trafficDataForTest = CreatePortScanNetworkDataForTest();
			var captureDevice = new TestCaptureDevice(trafficDataForTest);
			SharpPcapInformationSource networkInformationSource = new SharpPcapInformationSource(captureDevice, 2000);
			string protectedHostIpAddress = "192.168.100.102";
			IRule portScanRule = new PortScanRule(protectedHostIpAddress, 8);
			Sensor hostScanSensor = new Sensor(networkInformationSource, portScanRule, reportAgent);

			using (TransactionScope transaction = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
			{		
				//act
				hostScanSensor.Start();
				await TestPause();
				int numberofPostScanAlerts = datagAgent.CountAlerts();

				//assert
				Assert.AreEqual(3, numberofPostScanAlerts);
			}
		}

		private RawCapture[] CreatePortScanNetworkDataForTest()
		{
			RawCapture capturedPacket1 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x08, 0x00, 0x27, 0xd7, 0x2c, 0x71, 0x08, 0x00, 0x27, 
				0x7a, 0x64, 0xa6, 0x08, 0x00, 0x45, 0x00, 0x00, 0x2c, 
				0x35, 0xc3, 0x00, 0x00, 0x29, 0x06, 0x11, 0xeb, 0xc0, 
				0xa8, 0x64, 0x67, 0xc0, 0xa8, 0x64, 0x66, 0xe9, 0x0d, 
				0x02, 0x4b, 0x29, 0xfd, 0x91, 0xd3, 0x00, 0x00, 0x00, 
				0x00, 0x60, 0x02, 0x04, 0x00, 0xa2, 0xde, 0x00, 0x00, 
				0x02, 0x04, 0x05, 0xb4, 0x00, 0x00, 
			});



			RawCapture capturedPacket2 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x08, 0x00, 0x27, 0xd7, 0x2c, 0x71, 0x08, 0x00, 0x27, 
				0x7a, 0x64, 0xa6, 0x08, 0x00, 0x45, 0x00, 0x00, 0x2c, 
				0x72, 0x43, 0x00, 0x00, 0x33, 0x06, 0xcb, 0x6a, 0xc0, 
				0xa8, 0x64, 0x67, 0xc0, 0xa8, 0x64, 0x66, 0xe9, 0x0d, 
				0x00, 0x6e, 0x29, 0xfd, 0x91, 0xd3, 0x00, 0x00, 0x00, 
				0x00, 0x60, 0x02, 0x04, 0x00, 0xa4, 0xbb, 0x00, 0x00, 
				0x02, 0x04, 0x05, 0xb4, 0x00, 0x00, 
			});

			RawCapture capturedPacket3 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x08, 0x00, 0x27, 0xd7, 0x2c, 0x71, 0x08, 0x00, 0x27, 
				0x7a, 0x64, 0xa6, 0x08, 0x00, 0x45, 0x00, 0x00, 0x2c, 
				0x35, 0x44, 0x00, 0x00, 0x35, 0x06, 0x06, 0x6a, 0xc0, 
				0xa8, 0x64, 0x67, 0xc0, 0xa8, 0x64, 0x66, 0xe9, 0x0d, 
				0x03, 0xe1, 0x29, 0xfd, 0x91, 0xd3, 0x00, 0x00, 0x00, 
				0x00, 0x60, 0x02, 0x04, 0x00, 0xa1, 0x48, 0x00, 0x00, 
				0x02, 0x04, 0x05, 0xb4, 0x00, 0x00, 
			});


			RawCapture capturedPacket4 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x08, 0x00, 0x27, 0xd7, 0x2c, 0x71, 0x08, 0x00, 0x27, 
				0x7a, 0x64, 0xa6, 0x08, 0x00, 0x45, 0x00, 0x00, 0x2c, 
				0x30, 0x5b, 0x00, 0x00, 0x3b, 0x06, 0x05, 0x53, 0xc0, 
				0xa8, 0x64, 0x67, 0xc0, 0xa8, 0x64, 0x66, 0xe9, 0x0d, 
				0x01, 0x00, 0x29, 0xfd, 0x91, 0xd3, 0x00, 0x00, 0x00, 
				0x00, 0x60, 0x02, 0x04, 0x00, 0xa4, 0x29, 0x00, 0x00, 
				0x02, 0x04, 0x05, 0xb4, 0x00, 0x00, 
			});

			RawCapture capturedPacket5 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x08, 0x00, 0x27, 0xd7, 0x2c, 0x71, 0x08, 0x00, 0x27, 
				0x7a, 0x64, 0xa6, 0x08, 0x00, 0x45, 0x00, 0x00, 0x2c, 
				0xa5, 0xa7, 0x00, 0x00, 0x33, 0x06, 0x98, 0x06, 0xc0, 
				0xa8, 0x64, 0x67, 0xc0, 0xa8, 0x64, 0x66, 0xe9, 0x0d, 
				0xdd, 0xa2, 0x29, 0xfd, 0x91, 0xd3, 0x00, 0x00, 0x00, 
				0x00, 0x60, 0x02, 0x04, 0x00, 0xc7, 0x86, 0x00, 0x00, 
				0x02, 0x04, 0x05, 0xb4, 0x00, 0x00, 
			});

			RawCapture capturedPacket6 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x08, 0x00, 0x27, 0xd7, 0x2c, 0x71, 0x08, 0x00, 0x27, 
				0x7a, 0x64, 0xa6, 0x08, 0x00, 0x45, 0x00, 0x00, 0x2c, 
				0x32, 0x4e, 0x00, 0x00, 0x2e, 0x06, 0x10, 0x60, 0xc0, 
				0xa8, 0x64, 0x67, 0xc0, 0xa8, 0x64, 0x66, 0xe9, 0x0d, 
				0x4e, 0x25, 0x29, 0xfd, 0x91, 0xd3, 0x00, 0x00, 0x00, 
				0x00, 0x60, 0x02, 0x04, 0x00, 0x57, 0x04, 0x00, 0x00, 
				0x02, 0x04, 0x05, 0xb4, 0x00, 0x00, 
			});


			RawCapture capturedPacket7 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x08, 0x00, 0x27, 0xd7, 0x2c, 0x71, 0x08, 0x00, 0x27, 
				0x7a, 0x64, 0xa6, 0x08, 0x00, 0x45, 0x00, 0x00, 0x2c, 
				0x43, 0xbb, 0x00, 0x00, 0x37, 0x06, 0xf5, 0xf2, 0xc0, 
				0xa8, 0x64, 0x67, 0xc0, 0xa8, 0x64, 0x66, 0xe9, 0x0d, 
				0x00, 0x15, 0x29, 0xfd, 0x91, 0xd3, 0x00, 0x00, 0x00, 
				0x00, 0x60, 0x02, 0x04, 0x00, 0xa5, 0x14, 0x00, 0x00, 
				0x02, 0x04, 0x05, 0xb4, 0x00, 0x00, 
			});


			RawCapture capturedPacket8 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x08, 0x00, 0x27, 0xd7, 0x2c, 0x71, 0x08, 0x00, 0x27, 
				0x7a, 0x64, 0xa6, 0x08, 0x00, 0x45, 0x00, 0x00, 0x2c, 
				0x1b, 0x4e, 0x00, 0x00, 0x2b, 0x06, 0x2a, 0x60, 0xc0, 
				0xa8, 0x64, 0x67, 0xc0, 0xa8, 0x64, 0x66, 0xe9, 0x0d, 
				0x00, 0x16, 0x29, 0xfd, 0x91, 0xd3, 0x00, 0x00, 0x00, 
				0x00, 0x60, 0x02, 0x04, 0x00, 0xa5, 0x13, 0x00, 0x00, 
				0x02, 0x04, 0x05, 0xb4, 0x00, 0x00, 
			});

			RawCapture capturedPacket9 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x08, 0x00, 0x27, 0xd7, 0x2c, 0x71, 0x08, 0x00, 0x27, 
				0x7a, 0x64, 0xa6, 0x08, 0x00, 0x45, 0x00, 0x00, 0x2c, 
				0xd3, 0xe3, 0x00, 0x00, 0x2b, 0x06, 0x71, 0xca, 0xc0, 
				0xa8, 0x64, 0x67, 0xc0, 0xa8, 0x64, 0x66, 0xe9, 0x0d, 
				0x01, 0xbb, 0x29, 0xfd, 0x91, 0xd3, 0x00, 0x00, 0x00, 
				0x00, 0x60, 0x02, 0x04, 0x00, 0xa3, 0x6e, 0x00, 0x00, 
				0x02, 0x04, 0x05, 0xb4, 0x00, 0x00, 
			});

			RawCapture capturedPacket10 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x08, 0x00, 0x27, 0xd7, 0x2c, 0x71, 0x08, 0x00, 0x27, 
				0x7a, 0x64, 0xa6, 0x08, 0x00, 0x45, 0x00, 0x00, 0x2c, 
				0x64, 0xb3, 0x00, 0x00, 0x2f, 0x06, 0xdc, 0xfa, 0xc0, 
				0xa8, 0x64, 0x67, 0xc0, 0xa8, 0x64, 0x66, 0xe9, 0x0d, 
				0x00, 0x50, 0x29, 0xfd, 0x91, 0xd3, 0x00, 0x00, 0x00, 
				0x00, 0x60, 0x02, 0x04, 0x00, 0xa4, 0xd9, 0x00, 0x00, 
				0x02, 0x04, 0x05, 0xb4, 0x00, 0x00, 
			});

			return new RawCapture[10]
			{
				capturedPacket1, capturedPacket2, capturedPacket3, capturedPacket4, capturedPacket5,
				capturedPacket6, capturedPacket7, capturedPacket8, capturedPacket9, capturedPacket10
			};
		}

		private RawCapture[] CreateNetworkDataForTest()
		{
			RawCapture capturedPacket = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x56, 
				0xc0, 0x00, 0x08, 0x08, 0x00, 0x45, 0x00, 0x00, 0x1c, 
				0xe2, 0x85, 0x00, 0x00, 0x3b, 0x01, 0xbe, 0x07, 0xc0, 
				0xa8, 0x2f, 0x01, 0xc0, 0xa8, 0x2f, 0x02, 0x08, 0x00, 
				0xc5, 0x7f, 0x32, 0x80, 0x00, 0x00, 
			});

			RawCapture capturedPacket2 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x56, 
				0xc0, 0x00, 0x08, 0x08, 0x00, 0x45, 0x00, 0x00, 0x1c, 
				0x6c, 0xf4, 0x00, 0x00, 0x32, 0x01, 0x3c, 0x96, 0xc0, 
				0xa8, 0x2f, 0x01, 0xc0, 0xa8, 0x2f, 0x05, 0x08, 0x00, 
				0xab, 0xe2, 0x4c, 0x1d, 0x00, 0x00, 
			});

			RawCapture capturedPacket3 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x56, 
				0xc0, 0x00, 0x08, 0x08, 0x00, 0x45, 0x00, 0x00, 0x1c, 
				0x1c, 0x32, 0x00, 0x00, 0x3a, 0x01, 0x85, 0x57, 0xc0, 
				0xa8, 0x2f, 0x01, 0xc0, 0xa8, 0x2f, 0x06, 0x08, 0x00, 
				0x30, 0x4e, 0xc7, 0xb1, 0x00, 0x00, 
			});

			RawCapture capturedPacket4 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x56, 
				0xc0, 0x00, 0x08, 0x08, 0x00, 0x45, 0x00, 0x00, 0x1c, 
				0x5a, 0x71, 0x00, 0x00, 0x37, 0x01, 0x4a, 0x17, 0xc0, 
				0xa8, 0x2f, 0x01, 0xc0, 0xa8, 0x2f, 0x07, 0x08, 0x00, 
				0xa9, 0x56, 0x4e, 0xa9, 0x00, 0x00, 
			});

			RawCapture capturedPacket5 = new RawCapture(LinkLayers.Ethernet, new PosixTimeval(),  new byte[]
			{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x56, 
				0xc0, 0x00, 0x08, 0x08, 0x00, 0x45, 0x00, 0x00, 0x1c, 
				0xc7, 0x27, 0x00, 0x00, 0x35, 0x01, 0xdf, 0x5f, 0xc0, 
				0xa8, 0x2f, 0x01, 0xc0, 0xa8, 0x2f, 0x08, 0x08, 0x00, 
				0xb1, 0xdf, 0x46, 0x20, 0x00, 0x00, 
			});

			return new RawCapture[5] {capturedPacket, capturedPacket2, capturedPacket3, capturedPacket4, capturedPacket5};
		}


		private async Task TestPause()
		{
			await Task.Delay(20000);
		}
	}
}
